// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Site.Data;

namespace Site.Migrations
{
    [DbContext(typeof(SiteContext))]
    [Migration("20181226122252_M~AddForeignKeyWebsiteLanguagePages")]
    partial class MAddForeignKeyWebsiteLanguagePages
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.1-rtm-30846")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Site.Data.ApiKeys", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClientId")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("ClientSecret")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<DateTime>("LastAccess")
                        .HasColumnType("datetime");

                    b.Property<string>("Permissions")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<string>("TruncatedKey")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<int?>("WebsiteId");

                    b.HasKey("Id");

                    b.HasIndex("WebsiteId");

                    b.ToTable("ApiKeys");
                });

            modelBuilder.Entity("Site.Data.AspNetRoleClaims", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Site.Data.AspNetRoles", b =>
                {
                    b.Property<string>("Id");

                    b.Property<string>("ConcurrencyStamp");

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Site.Data.AspNetUserClaims", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Site.Data.AspNetUserLogins", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Site.Data.AspNetUserRoles", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Site.Data.AspNetUsers", b =>
                {
                    b.Property<string>("Id");

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp");

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Site.Data.AspNetUserTokens", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Site.Data.Companies", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Coc")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("Company")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("Vat")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("Site.Data.CompanyUsers", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CompanyId");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(450);

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("CompanyUsers");
                });

            modelBuilder.Entity("Site.Data.Cultures", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CultureCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("CultureName")
                        .IsRequired()
                        .HasMaxLength(25)
                        .IsUnicode(false);

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("LanguageCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("Cultures");
                });

            modelBuilder.Entity("Site.Data.DataItemFiles", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("Active");

                    b.Property<string>("Alt")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("CompressedPath")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.Property<int>("CustomOrder");

                    b.Property<int>("DataItemId");

                    b.Property<int>("DataTemplateUploadId");

                    b.Property<string>("OriginalPath")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("DataItemId");

                    b.ToTable("DataItemFiles");
                });

            modelBuilder.Entity("Site.Data.DataItemResources", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DataItemId");

                    b.Property<int>("DataTemplateFieldId");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("DataItemId");

                    b.ToTable("DataItemResources");
                });

            modelBuilder.Entity("Site.Data.DataItems", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<string>("AlternateGuid")
                        .HasMaxLength(450);

                    b.Property<int>("CustomOrder");

                    b.Property<int>("DataTemplateId");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("datetime");

                    b.Property<string>("HtmlEditor")
                        .IsRequired();

                    b.Property<string>("PageDescription")
                        .IsRequired()
                        .HasMaxLength(400);

                    b.Property<string>("PageKeywords")
                        .IsRequired()
                        .HasMaxLength(400);

                    b.Property<string>("PageTitle")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("PageUrl")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<DateTime>("PublishDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Subtitle")
                        .IsRequired();

                    b.Property<string>("Text")
                        .IsRequired();

                    b.Property<string>("Title")
                        .IsRequired();

                    b.Property<DateTime>("ToDate")
                        .HasColumnType("datetime");

                    b.Property<int>("WebsiteLanguageId");

                    b.HasKey("Id");

                    b.HasIndex("DataTemplateId");

                    b.ToTable("DataItems");
                });

            modelBuilder.Entity("Site.Data.DataTemplateFields", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CallName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<int>("CustomOrder");

                    b.Property<int>("DataTemplateId");

                    b.Property<string>("DefaultValue");

                    b.Property<string>("Heading")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int?>("LinkedToDataTemplateId");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("DataTemplateId");

                    b.ToTable("DataTemplateFields");
                });

            modelBuilder.Entity("Site.Data.DataTemplates", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(40)
                        .IsUnicode(false);

                    b.Property<bool?>("Active");

                    b.Property<string>("CallName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("Controller")
                        .IsRequired()
                        .HasMaxLength(40)
                        .IsUnicode(false);

                    b.Property<int?>("CustomOrder");

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<bool>("DetailPage");

                    b.Property<string>("FromDateHeading")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("HtmlEditorHeading")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("Icon")
                        .HasMaxLength(40)
                        .IsUnicode(false);

                    b.Property<string>("MenuType")
                        .HasMaxLength(40)
                        .IsUnicode(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(70);

                    b.Property<string>("PageAlternateGuid")
                        .IsRequired()
                        .HasMaxLength(450);

                    b.Property<string>("PublishDateHeading")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("SubtitleHeading")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("TextHeading")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("TitleHeading")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("ToDateHeading")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<int>("WebsiteId");

                    b.HasKey("Id");

                    b.HasIndex("WebsiteId");

                    b.ToTable("DataTemplates");
                });

            modelBuilder.Entity("Site.Data.DataTemplateSections", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DataTemplateId");

                    b.Property<int>("LinkedToDataTemplateId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("Section")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(40)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("DataTemplateId");

                    b.ToTable("DataTemplateSections");
                });

            modelBuilder.Entity("Site.Data.DataTemplateUploads", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CallName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<int?>("CustomOrder");

                    b.Property<int>("DataTemplateId");

                    b.Property<string>("FileExtensions")
                        .IsRequired()
                        .HasMaxLength(70)
                        .IsUnicode(false);

                    b.Property<string>("Heading")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int>("Height");

                    b.Property<byte>("MaxFiles");

                    b.Property<int>("MaxSize");

                    b.Property<string>("MimeTypes")
                        .IsRequired()
                        .HasMaxLength(120)
                        .IsUnicode(false);

                    b.Property<byte>("MinFiles");

                    b.Property<int>("Width");

                    b.HasKey("Id");

                    b.HasIndex("DataTemplateId");

                    b.ToTable("DataTemplateUploads");
                });

            modelBuilder.Entity("Site.Data.Languages", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<string>("Culture")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasMaxLength(40)
                        .IsUnicode(false);

                    b.Property<string>("TimeZoneId")
                        .HasMaxLength(150);

                    b.HasKey("Id");

                    b.ToTable("Languages");
                });

            modelBuilder.Entity("Site.Data.LanguageTranslate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<int>("LanguageId");

                    b.Property<string>("Translate")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("LanguageTranslate");
                });

            modelBuilder.Entity("Site.Data.NavigationItems", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CustomOrder");

                    b.Property<string>("CustomUrl")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<string>("FilterAlternateGuid")
                        .IsRequired()
                        .HasMaxLength(450);

                    b.Property<string>("LinkedToAlternateGuid")
                        .IsRequired()
                        .HasMaxLength(450);

                    b.Property<int>("LinkedToSectionId");

                    b.Property<string>("LinkedToType")
                        .IsRequired()
                        .HasMaxLength(40)
                        .IsUnicode(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int>("NavigationId");

                    b.Property<int>("Parent");

                    b.Property<string>("Target")
                        .IsRequired()
                        .HasMaxLength(40)
                        .IsUnicode(false);

                    b.Property<int>("WebsiteLanguageId");

                    b.HasKey("Id");

                    b.HasIndex("NavigationId");

                    b.ToTable("NavigationItems");
                });

            modelBuilder.Entity("Site.Data.Navigations", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CallName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<byte>("MaxDepth");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int>("WebsiteId");

                    b.HasKey("Id");

                    b.HasIndex("WebsiteId");

                    b.ToTable("Navigations");
                });

            modelBuilder.Entity("Site.Data.OauthTokens", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AccessToken")
                        .IsRequired();

                    b.Property<string>("CallName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<string>("RefreshToken")
                        .IsRequired();

                    b.Property<int>("WebsiteId");

                    b.HasKey("Id");

                    b.HasIndex("WebsiteId");

                    b.ToTable("OAuthTokens");
                });

            modelBuilder.Entity("Site.Data.OrderCoupons", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CouponId");

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(20, 4)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<int>("OrderId");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderCoupons");
                });

            modelBuilder.Entity("Site.Data.OrderFees", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<int>("OrderId");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(20, 4)");

                    b.Property<decimal?>("TaxRate")
                        .HasColumnType("decimal(20, 4)");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderFees");
                });

            modelBuilder.Entity("Site.Data.OrderLines", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(20, 4)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<int>("OrderId");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(20, 4)");

                    b.Property<int>("ProductId");

                    b.Property<int>("Quantity");

                    b.Property<decimal>("TaxRate")
                        .HasColumnType("decimal(20, 4)");

                    b.Property<bool?>("TaxShipping");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderLines");
                });

            modelBuilder.Entity("Site.Data.OrderRefundLines", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("OrderLineId");

                    b.Property<int>("OrderRefundId");

                    b.Property<int>("Quantity");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(20, 4)");

                    b.HasKey("Id");

                    b.HasIndex("OrderRefundId");

                    b.ToTable("OrderRefundLines");
                });

            modelBuilder.Entity("Site.Data.OrderRefunds", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("InvoiceNumber")
                        .HasMaxLength(100);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<int>("OrderId");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<decimal>("Refund")
                        .HasColumnType("decimal(20, 4)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(450);

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderRefunds");
                });

            modelBuilder.Entity("Site.Data.Orders", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BillingAddressLine1")
                        .IsRequired();

                    b.Property<string>("BillingAddressLine2")
                        .IsRequired();

                    b.Property<string>("BillingCity")
                        .IsRequired();

                    b.Property<string>("BillingCompany")
                        .IsRequired();

                    b.Property<string>("BillingCountry")
                        .IsRequired();

                    b.Property<string>("BillingEmail");

                    b.Property<string>("BillingFirstName")
                        .IsRequired();

                    b.Property<string>("BillingLastName")
                        .IsRequired();

                    b.Property<string>("BillingPhoneNumber");

                    b.Property<string>("BillingState")
                        .IsRequired();

                    b.Property<string>("BillingVatNumber")
                        .IsRequired();

                    b.Property<string>("BillingZipCode")
                        .IsRequired();

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasMaxLength(40);

                    b.Property<string>("InvoiceNumber")
                        .HasMaxLength(100);

                    b.Property<string>("Note")
                        .IsRequired();

                    b.Property<string>("OrderNumber")
                        .HasMaxLength(100);

                    b.Property<string>("RefInvoiceNumber")
                        .HasMaxLength(100);

                    b.Property<string>("ReserveGuid")
                        .HasMaxLength(450);

                    b.Property<string>("ShippingAddressLine1")
                        .IsRequired();

                    b.Property<string>("ShippingAddressLine2")
                        .IsRequired();

                    b.Property<string>("ShippingCity")
                        .IsRequired();

                    b.Property<string>("ShippingCompany")
                        .IsRequired();

                    b.Property<string>("ShippingCountry")
                        .IsRequired();

                    b.Property<string>("ShippingFirstName")
                        .IsRequired();

                    b.Property<string>("ShippingLastName")
                        .IsRequired();

                    b.Property<string>("ShippingState")
                        .IsRequired();

                    b.Property<string>("ShippingZipCode")
                        .IsRequired();

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(40);

                    b.Property<string>("TransactionId")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("WebsiteId");

                    b.HasKey("Id");

                    b.HasIndex("WebsiteId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Site.Data.OrderShippingZoneMethods", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<int>("OrderId");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(20, 4)");

                    b.Property<int>("ShippingZoneMethodId");

                    b.Property<bool?>("Taxable");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderShippingZoneMethods");
                });

            modelBuilder.Entity("Site.Data.PageFiles", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("Active");

                    b.Property<string>("Alt")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("CompressedPath")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.Property<int>("CustomOrder");

                    b.Property<string>("OriginalPath")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.Property<int>("PageId");

                    b.Property<int>("PageTemplateUploadId");

                    b.HasKey("Id");

                    b.HasIndex("PageId");

                    b.ToTable("PageFiles");
                });

            modelBuilder.Entity("Site.Data.PageResources", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("PageId");

                    b.Property<int>("PageTemplateFieldId");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("PageId");

                    b.ToTable("PageResources");
                });

            modelBuilder.Entity("Site.Data.Pages", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("Active");

                    b.Property<string>("AlternateGuid")
                        .IsRequired()
                        .HasMaxLength(450);

                    b.Property<int?>("CustomOrder");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(400);

                    b.Property<string>("Keywords")
                        .IsRequired()
                        .HasMaxLength(400);

                    b.Property<string>("Name")
                        .HasMaxLength(200);

                    b.Property<int>("PageTemplateId");

                    b.Property<int>("Parent");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<int>("WebsiteLanguageId");

                    b.HasKey("Id");

                    b.HasIndex("PageTemplateId");

                    b.HasIndex("WebsiteLanguageId");

                    b.ToTable("Pages");
                });

            modelBuilder.Entity("Site.Data.PageTemplateFields", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CallName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<int>("CustomOrder");

                    b.Property<string>("DefaultValue");

                    b.Property<string>("Heading")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int>("PageTemplateId");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("PageTemplateId");

                    b.ToTable("PageTemplateFields");
                });

            modelBuilder.Entity("Site.Data.PageTemplates", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(40)
                        .IsUnicode(false);

                    b.Property<string>("Controller")
                        .IsRequired()
                        .HasMaxLength(40)
                        .IsUnicode(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(35);

                    b.Property<string>("Type")
                        .HasMaxLength(25)
                        .IsUnicode(false);

                    b.Property<int>("WebsiteId");

                    b.HasKey("Id");

                    b.HasIndex("WebsiteId");

                    b.ToTable("PageTemplates");
                });

            modelBuilder.Entity("Site.Data.PageTemplateSections", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("LinkedToDataTemplateId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int>("PageTemplateId");

                    b.Property<string>("Section")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(40)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("PageTemplateId");

                    b.ToTable("PageTemplateSections");
                });

            modelBuilder.Entity("Site.Data.PageTemplateUploads", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CallName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<int?>("CustomOrder");

                    b.Property<string>("FileExtensions")
                        .IsRequired()
                        .HasMaxLength(70)
                        .IsUnicode(false);

                    b.Property<string>("Heading")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int>("Height");

                    b.Property<byte>("MaxFiles");

                    b.Property<int>("MaxSize");

                    b.Property<string>("MimeTypes")
                        .IsRequired()
                        .HasMaxLength(120)
                        .IsUnicode(false);

                    b.Property<byte>("MinFiles");

                    b.Property<int>("PageTemplateId");

                    b.Property<int>("Width");

                    b.HasKey("Id");

                    b.HasIndex("PageTemplateId");

                    b.ToTable("PageTemplateUploads");
                });

            modelBuilder.Entity("Site.Data.ProductFields", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CallName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<int>("CustomOrder");

                    b.Property<string>("DefaultValue")
                        .IsRequired();

                    b.Property<string>("Heading")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int>("ProductTemplateId");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("ProductTemplateId");

                    b.ToTable("ProductFields");
                });

            modelBuilder.Entity("Site.Data.ProductFiles", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<string>("Alt")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("CompressedPath")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.Property<int>("CustomOrder");

                    b.Property<string>("OriginalPath")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.Property<int>("ProductId");

                    b.Property<int>("ProductUploadId");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductFiles");
                });

            modelBuilder.Entity("Site.Data.ProductPages", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("PageAlternateGuid")
                        .IsRequired()
                        .HasMaxLength(450);

                    b.Property<int>("ProductId");

                    b.Property<int>("WebsiteLanguageId");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductPages");
                });

            modelBuilder.Entity("Site.Data.ProductPageSettings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(400);

                    b.Property<string>("Keywords")
                        .IsRequired()
                        .HasMaxLength(400);

                    b.Property<int>("ProductId");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<int>("WebsiteLanguageId");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductPageSettings");
                });

            modelBuilder.Entity("Site.Data.ProductResources", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ProductFieldId");

                    b.Property<int>("ProductId");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.Property<int?>("WebsiteLanguageId");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductResources");
                });

            modelBuilder.Entity("Site.Data.Products", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("Active");

                    b.Property<string>("Backorders")
                        .IsRequired()
                        .HasMaxLength(40)
                        .IsUnicode(false);

                    b.Property<int?>("CustomOrder");

                    b.Property<int>("DownloadExpire");

                    b.Property<int>("DownloadLimit");

                    b.Property<decimal>("Height")
                        .HasColumnType("decimal(20, 4)");

                    b.Property<decimal>("Length")
                        .HasColumnType("decimal(20, 4)");

                    b.Property<bool>("ManageStock");

                    b.Property<int>("MaxPerOrder");

                    b.Property<string>("Name")
                        .HasMaxLength(255);

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(20, 4)");

                    b.Property<int>("ProductTemplateId");

                    b.Property<DateTime>("PromoFromDate")
                        .HasColumnType("datetime");

                    b.Property<decimal>("PromoPrice")
                        .HasColumnType("decimal(20, 4)");

                    b.Property<bool?>("PromoSchedule");

                    b.Property<DateTime>("PromoToDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("Reviews");

                    b.Property<int>("ShippingClassId");

                    b.Property<string>("Sku")
                        .IsRequired()
                        .HasColumnName("SKU")
                        .HasMaxLength(200);

                    b.Property<int>("StockQuantity");

                    b.Property<string>("StockStatus")
                        .IsRequired()
                        .HasMaxLength(40)
                        .IsUnicode(false);

                    b.Property<int>("TaxClassId");

                    b.Property<string>("TaxStatus")
                        .IsRequired()
                        .HasMaxLength(40)
                        .IsUnicode(false);

                    b.Property<decimal>("Weight")
                        .HasColumnType("decimal(20, 4)");

                    b.Property<decimal>("Width")
                        .HasColumnType("decimal(20, 4)");

                    b.HasKey("Id");

                    b.HasIndex("ProductTemplateId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("Site.Data.ProductTemplates", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(40)
                        .IsUnicode(false);

                    b.Property<bool?>("Attributes");

                    b.Property<string>("Controller")
                        .IsRequired()
                        .HasMaxLength(40)
                        .IsUnicode(false);

                    b.Property<bool?>("CrossSells");

                    b.Property<bool?>("Downloadable");

                    b.Property<bool?>("ExternalProduct");

                    b.Property<bool?>("GroupedProduct");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(35);

                    b.Property<bool?>("Reviews");

                    b.Property<bool?>("SimpleProduct");

                    b.Property<bool?>("Upsells");

                    b.Property<bool?>("VariableProduct");

                    b.Property<bool?>("Virtual");

                    b.Property<int>("WebsiteId");

                    b.HasKey("Id");

                    b.HasIndex("WebsiteId");

                    b.ToTable("ProductTemplates");
                });

            modelBuilder.Entity("Site.Data.ProductUploads", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CallName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<int>("CustomOrder");

                    b.Property<string>("FileExtensions")
                        .IsRequired()
                        .HasMaxLength(70)
                        .IsUnicode(false);

                    b.Property<string>("Heading")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int>("Height");

                    b.Property<byte>("MaxFiles");

                    b.Property<int>("MaxSize");

                    b.Property<string>("MimeTypes")
                        .IsRequired()
                        .HasMaxLength(120)
                        .IsUnicode(false);

                    b.Property<byte>("MinFiles");

                    b.Property<int>("ProductTemplateId");

                    b.Property<int>("Width");

                    b.HasKey("Id");

                    b.HasIndex("ProductTemplateId");

                    b.ToTable("ProductUploads");
                });

            modelBuilder.Entity("Site.Data.ReviewResources", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ReviewId");

                    b.Property<int>("ReviewTemplateFieldId");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("ReviewId");

                    b.ToTable("ReviewResources");
                });

            modelBuilder.Entity("Site.Data.Reviews", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("Active");

                    b.Property<bool?>("Anonymous");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<int>("LinkedToId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<byte>("Rating");

                    b.Property<int?>("ReviewTemplateId");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(450);

                    b.Property<bool?>("ViewedByAdmin");

                    b.Property<int>("WebsiteLanguageId");

                    b.HasKey("Id");

                    b.HasIndex("ReviewTemplateId");

                    b.HasIndex("WebsiteLanguageId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("Site.Data.ReviewTemplateFields", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CallName")
                        .IsRequired()
                        .HasMaxLength(40)
                        .IsUnicode(false);

                    b.Property<int>("CustomOrder");

                    b.Property<string>("DefaultValue");

                    b.Property<string>("Heading")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int>("ReviewTemplateId");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("ReviewTemplateId");

                    b.ToTable("ReviewTemplateFields");
                });

            modelBuilder.Entity("Site.Data.ReviewTemplates", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<string>("CallName")
                        .IsRequired()
                        .HasMaxLength(40)
                        .IsUnicode(false);

                    b.Property<bool?>("CheckBeforeOnline");

                    b.Property<string>("LinkedToType")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int>("WebsiteId");

                    b.HasKey("Id");

                    b.HasIndex("WebsiteId");

                    b.ToTable("ReviewTemplates");
                });

            modelBuilder.Entity("Site.Data.Settings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(40)
                        .IsUnicode(false);

                    b.Property<int>("LinkedToId");

                    b.Property<string>("LinkedToType")
                        .IsRequired()
                        .HasMaxLength(40)
                        .IsUnicode(false);

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.ToTable("Settings");
                });

            modelBuilder.Entity("Site.Data.ShippingClasses", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<int>("WebsiteId");

                    b.HasKey("Id");

                    b.HasIndex("WebsiteId");

                    b.ToTable("ShippingClasses");
                });

            modelBuilder.Entity("Site.Data.ShippingZoneLocations", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<int>("ShippingZoneId");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(40)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("ShippingZoneId");

                    b.ToTable("ShippingZoneLocations");
                });

            modelBuilder.Entity("Site.Data.ShippingZoneMethodClasses", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Cost")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<int>("ShippingClassId");

                    b.Property<int>("ShippingZoneMethodId");

                    b.HasKey("Id");

                    b.HasIndex("ShippingZoneMethodId");

                    b.ToTable("ShippingZoneMethodClasses");
                });

            modelBuilder.Entity("Site.Data.ShippingZoneMethods", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<string>("CalculationType")
                        .IsRequired()
                        .HasMaxLength(40)
                        .IsUnicode(false);

                    b.Property<string>("Cost")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<int?>("CustomOrder");

                    b.Property<string>("FreeShippingType")
                        .IsRequired()
                        .HasMaxLength(40)
                        .IsUnicode(false);

                    b.Property<decimal>("MinimumAmount")
                        .HasColumnType("decimal(20, 4)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<int>("ShippingZoneId");

                    b.Property<bool>("Taxable");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(40)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("ShippingZoneId");

                    b.ToTable("ShippingZoneMethods");
                });

            modelBuilder.Entity("Site.Data.ShippingZones", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("Default");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<int?>("PriorityOrder");

                    b.Property<string>("Slug")
                        .HasMaxLength(200);

                    b.Property<int?>("WebsiteId");

                    b.HasKey("Id");

                    b.HasIndex("WebsiteId");

                    b.ToTable("ShippingZones");
                });

            modelBuilder.Entity("Site.Data.TaxClasses", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Default");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<int>("WebsiteId");

                    b.HasKey("Id");

                    b.HasIndex("WebsiteId");

                    b.ToTable("TaxClasses");
                });

            modelBuilder.Entity("Site.Data.TaxRateLocations", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<int>("TaxRateId");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(40)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("TaxRateId");

                    b.ToTable("TaxRateLocations");
                });

            modelBuilder.Entity("Site.Data.TaxRates", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Compound");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(2)
                        .IsUnicode(false);

                    b.Property<bool?>("Default");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<int>("PriorityOrder");

                    b.Property<decimal>("Rate")
                        .HasColumnType("decimal(20, 4)");

                    b.Property<bool>("Shipping");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<int>("TaxClassId");

                    b.HasKey("Id");

                    b.HasIndex("TaxClassId");

                    b.ToTable("TaxRates");
                });

            modelBuilder.Entity("Site.Data.WebsiteFields", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CallName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<int>("CustomOrder");

                    b.Property<string>("DefaultValue")
                        .IsRequired();

                    b.Property<bool?>("DeveloperOnly");

                    b.Property<string>("Heading")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<int>("WebsiteId");

                    b.HasKey("Id");

                    b.HasIndex("WebsiteId");

                    b.ToTable("WebsiteFields");
                });

            modelBuilder.Entity("Site.Data.WebsiteFiles", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<string>("Alt")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("CompressedPath")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.Property<int>("CustomOrder");

                    b.Property<string>("OriginalPath")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.Property<int?>("WebsiteLanguageId");

                    b.Property<int>("WebsiteUploadId");

                    b.HasKey("Id");

                    b.HasIndex("WebsiteLanguageId");

                    b.ToTable("WebsiteFiles");
                });

            modelBuilder.Entity("Site.Data.WebsiteLanguages", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<bool>("DefaultLanguage");

                    b.Property<int>("LanguageId");

                    b.Property<int>("WebsiteId");

                    b.HasKey("Id");

                    b.HasIndex("LanguageId");

                    b.HasIndex("WebsiteId");

                    b.ToTable("WebsiteLanguages");
                });

            modelBuilder.Entity("Site.Data.WebsiteResources", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .IsRequired();

                    b.Property<int>("WebsiteFieldId");

                    b.Property<int>("WebsiteLanguageId");

                    b.HasKey("Id");

                    b.HasIndex("WebsiteLanguageId");

                    b.ToTable("WebsiteResources");
                });

            modelBuilder.Entity("Site.Data.Websites", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("Active");

                    b.Property<int>("CompanyId");

                    b.Property<string>("Domain")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("Extension")
                        .IsRequired()
                        .HasMaxLength(15);

                    b.Property<string>("Folder")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("RootPageAlternateGuid")
                        .HasMaxLength(450);

                    b.Property<string>("Subdomain")
                        .HasMaxLength(200);

                    b.Property<string>("Subtitle")
                        .HasMaxLength(60);

                    b.Property<string>("TypeClient")
                        .HasMaxLength(20);

                    b.Property<int?>("WebsiteLanguagesId");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("WebsiteLanguagesId");

                    b.ToTable("Websites");
                });

            modelBuilder.Entity("Site.Data.WebsiteUploads", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CallName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<int?>("CustomOrder");

                    b.Property<bool?>("DeveloperOnly");

                    b.Property<string>("FileExtensions")
                        .IsRequired()
                        .HasMaxLength(70)
                        .IsUnicode(false);

                    b.Property<string>("Heading")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int>("Height");

                    b.Property<byte>("MaxFiles");

                    b.Property<int>("MaxSize");

                    b.Property<string>("MimeTypes")
                        .IsRequired()
                        .HasMaxLength(120)
                        .IsUnicode(false);

                    b.Property<byte>("MinFiles");

                    b.Property<int>("WebsiteId");

                    b.Property<int>("Width");

                    b.HasKey("Id");

                    b.HasIndex("WebsiteId");

                    b.ToTable("WebsiteUploads");
                });

            modelBuilder.Entity("Site.Data.ApiKeys", b =>
                {
                    b.HasOne("Site.Data.Websites", "Website")
                        .WithMany("ApiKeys")
                        .HasForeignKey("WebsiteId")
                        .HasConstraintName("FK_ApiKeys_Websites")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Site.Data.AspNetRoleClaims", b =>
                {
                    b.HasOne("Site.Data.AspNetRoles", "Role")
                        .WithMany("AspNetRoleClaims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Site.Data.AspNetUserClaims", b =>
                {
                    b.HasOne("Site.Data.AspNetUsers", "User")
                        .WithMany("AspNetUserClaims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Site.Data.AspNetUserLogins", b =>
                {
                    b.HasOne("Site.Data.AspNetUsers", "User")
                        .WithMany("AspNetUserLogins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Site.Data.AspNetUserRoles", b =>
                {
                    b.HasOne("Site.Data.AspNetRoles", "Role")
                        .WithMany("AspNetUserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Site.Data.AspNetUsers", "User")
                        .WithMany("AspNetUserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Site.Data.CompanyUsers", b =>
                {
                    b.HasOne("Site.Data.Companies", "Company")
                        .WithMany("CompanyUsers")
                        .HasForeignKey("CompanyId")
                        .HasConstraintName("FK_CompanyUsers_Companies")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Site.Data.DataItemFiles", b =>
                {
                    b.HasOne("Site.Data.DataItems", "DataItem")
                        .WithMany("DataItemFiles")
                        .HasForeignKey("DataItemId")
                        .HasConstraintName("FK_DataItemFiles_DataItems")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Site.Data.DataItemResources", b =>
                {
                    b.HasOne("Site.Data.DataItems", "DataItem")
                        .WithMany("DataItemResources")
                        .HasForeignKey("DataItemId")
                        .HasConstraintName("FK_DataItemResources_DataItems")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Site.Data.DataItems", b =>
                {
                    b.HasOne("Site.Data.DataTemplates", "DataTemplate")
                        .WithMany("DataItems")
                        .HasForeignKey("DataTemplateId")
                        .HasConstraintName("FK_DataItems_DataTemplates")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Site.Data.DataTemplateFields", b =>
                {
                    b.HasOne("Site.Data.DataTemplates", "DataTemplate")
                        .WithMany("DataTemplateFields")
                        .HasForeignKey("DataTemplateId")
                        .HasConstraintName("FK_DataTemplateFields_DataTemplates")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Site.Data.DataTemplates", b =>
                {
                    b.HasOne("Site.Data.Websites", "Website")
                        .WithMany("DataTemplates")
                        .HasForeignKey("WebsiteId")
                        .HasConstraintName("FK_DataTemplates_Websites")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Site.Data.DataTemplateSections", b =>
                {
                    b.HasOne("Site.Data.DataTemplates", "DataTemplate")
                        .WithMany("DataTemplateSections")
                        .HasForeignKey("DataTemplateId")
                        .HasConstraintName("FK_DataTemplateSections_DataTemplates")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Site.Data.DataTemplateUploads", b =>
                {
                    b.HasOne("Site.Data.DataTemplates", "DataTemplate")
                        .WithMany("DataTemplateUploads")
                        .HasForeignKey("DataTemplateId")
                        .HasConstraintName("FK_DataTemplateUploads_DataTemplates")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Site.Data.NavigationItems", b =>
                {
                    b.HasOne("Site.Data.Navigations", "Navigation")
                        .WithMany("NavigationItems")
                        .HasForeignKey("NavigationId")
                        .HasConstraintName("FK_NavigationItems_Navigations")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Site.Data.Navigations", b =>
                {
                    b.HasOne("Site.Data.Websites", "Website")
                        .WithMany("Navigations")
                        .HasForeignKey("WebsiteId")
                        .HasConstraintName("FK_Navigations_Websites")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Site.Data.OauthTokens", b =>
                {
                    b.HasOne("Site.Data.Websites", "Website")
                        .WithMany("OauthTokens")
                        .HasForeignKey("WebsiteId")
                        .HasConstraintName("FK_OAuthTokens_Websites")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Site.Data.OrderCoupons", b =>
                {
                    b.HasOne("Site.Data.Orders", "Order")
                        .WithMany("OrderCoupons")
                        .HasForeignKey("OrderId")
                        .HasConstraintName("FK_OrderCoupons_Orders")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Site.Data.OrderFees", b =>
                {
                    b.HasOne("Site.Data.Orders", "Order")
                        .WithMany("OrderFees")
                        .HasForeignKey("OrderId")
                        .HasConstraintName("FK_OrderFees_Orders")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Site.Data.OrderLines", b =>
                {
                    b.HasOne("Site.Data.Orders", "Order")
                        .WithMany("OrderLines")
                        .HasForeignKey("OrderId")
                        .HasConstraintName("FK_OrderLines_Orders")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Site.Data.OrderRefundLines", b =>
                {
                    b.HasOne("Site.Data.OrderRefunds", "OrderRefund")
                        .WithMany("OrderRefundLines")
                        .HasForeignKey("OrderRefundId")
                        .HasConstraintName("FK_OrderRefundLines_OrderRefunds")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Site.Data.OrderRefunds", b =>
                {
                    b.HasOne("Site.Data.Orders", "Order")
                        .WithMany("OrderRefunds")
                        .HasForeignKey("OrderId")
                        .HasConstraintName("FK_OrderRefunds_Orders")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Site.Data.Orders", b =>
                {
                    b.HasOne("Site.Data.Websites", "Website")
                        .WithMany("Orders")
                        .HasForeignKey("WebsiteId")
                        .HasConstraintName("FK_Orders_Websites")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Site.Data.OrderShippingZoneMethods", b =>
                {
                    b.HasOne("Site.Data.Orders", "Order")
                        .WithMany("OrderShippingZoneMethods")
                        .HasForeignKey("OrderId")
                        .HasConstraintName("FK_OrderShippingZoneMethods_Orders")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Site.Data.PageFiles", b =>
                {
                    b.HasOne("Site.Data.Pages", "Page")
                        .WithMany("PageFiles")
                        .HasForeignKey("PageId")
                        .HasConstraintName("FK_PageFiles_Pages")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Site.Data.PageResources", b =>
                {
                    b.HasOne("Site.Data.Pages", "Page")
                        .WithMany("PageResources")
                        .HasForeignKey("PageId")
                        .HasConstraintName("FK_PageResources_Pages")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Site.Data.Pages", b =>
                {
                    b.HasOne("Site.Data.PageTemplates", "PageTemplate")
                        .WithMany("Pages")
                        .HasForeignKey("PageTemplateId")
                        .HasConstraintName("FK_Pages_PageTemplates")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Site.Data.WebsiteLanguages", "WebsiteLanguage")
                        .WithMany("Pages")
                        .HasForeignKey("WebsiteLanguageId")
                        .HasConstraintName("FK_Pages_WebsiteLanguages")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Site.Data.PageTemplateFields", b =>
                {
                    b.HasOne("Site.Data.PageTemplates", "PageTemplate")
                        .WithMany("PageTemplateFields")
                        .HasForeignKey("PageTemplateId")
                        .HasConstraintName("FK_PageTemplateFields_PageTemplates")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Site.Data.PageTemplates", b =>
                {
                    b.HasOne("Site.Data.Websites", "Website")
                        .WithMany("PageTemplates")
                        .HasForeignKey("WebsiteId")
                        .HasConstraintName("FK_PageTemplates_Websites")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Site.Data.PageTemplateSections", b =>
                {
                    b.HasOne("Site.Data.PageTemplates", "PageTemplate")
                        .WithMany("PageTemplateSections")
                        .HasForeignKey("PageTemplateId")
                        .HasConstraintName("FK_PageTemplateSections_PageTemplates")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Site.Data.PageTemplateUploads", b =>
                {
                    b.HasOne("Site.Data.PageTemplates", "PageTemplate")
                        .WithMany("PageTemplateUploads")
                        .HasForeignKey("PageTemplateId")
                        .HasConstraintName("FK_PageTemplateUploads_PageTemplates")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Site.Data.ProductFields", b =>
                {
                    b.HasOne("Site.Data.ProductTemplates", "ProductTemplate")
                        .WithMany("ProductFields")
                        .HasForeignKey("ProductTemplateId")
                        .HasConstraintName("FK_ProductFields_ProductTemplates")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Site.Data.ProductFiles", b =>
                {
                    b.HasOne("Site.Data.Products", "Product")
                        .WithMany("ProductFiles")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK_ProductFiles_Products")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Site.Data.ProductPages", b =>
                {
                    b.HasOne("Site.Data.Products", "Product")
                        .WithMany("ProductPages")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK_ProductPages_ProductPages")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Site.Data.ProductPageSettings", b =>
                {
                    b.HasOne("Site.Data.Products", "Product")
                        .WithMany("ProductPageSettings")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK_ProductPageSettings_Products")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Site.Data.ProductResources", b =>
                {
                    b.HasOne("Site.Data.Products", "Product")
                        .WithMany("ProductResources")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK_ProductResources_Products")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Site.Data.Products", b =>
                {
                    b.HasOne("Site.Data.ProductTemplates", "ProductTemplate")
                        .WithMany("Products")
                        .HasForeignKey("ProductTemplateId")
                        .HasConstraintName("FK_Products_ProductTemplates")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Site.Data.ProductTemplates", b =>
                {
                    b.HasOne("Site.Data.Websites", "Website")
                        .WithMany("ProductTemplates")
                        .HasForeignKey("WebsiteId")
                        .HasConstraintName("FK_ProductTemplates_Websites")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Site.Data.ProductUploads", b =>
                {
                    b.HasOne("Site.Data.ProductTemplates", "ProductTemplate")
                        .WithMany("ProductUploads")
                        .HasForeignKey("ProductTemplateId")
                        .HasConstraintName("FK_ProductUploads_ProductTemplates")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Site.Data.ReviewResources", b =>
                {
                    b.HasOne("Site.Data.Reviews", "Review")
                        .WithMany("ReviewResources")
                        .HasForeignKey("ReviewId")
                        .HasConstraintName("FK_ReviewResources_Reviews")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Site.Data.Reviews", b =>
                {
                    b.HasOne("Site.Data.ReviewTemplates", "ReviewTemplate")
                        .WithMany("Reviews")
                        .HasForeignKey("ReviewTemplateId")
                        .HasConstraintName("FK_Reviews_ReviewTemplates")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Site.Data.WebsiteLanguages", "WebsiteLanguage")
                        .WithMany("Reviews")
                        .HasForeignKey("WebsiteLanguageId")
                        .HasConstraintName("FK_Reviews_WebsiteLanguages")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Site.Data.ReviewTemplateFields", b =>
                {
                    b.HasOne("Site.Data.ReviewTemplates", "ReviewTemplate")
                        .WithMany("ReviewTemplateFields")
                        .HasForeignKey("ReviewTemplateId")
                        .HasConstraintName("FK_ReviewTemplateFields_ReviewTemplates")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Site.Data.ReviewTemplates", b =>
                {
                    b.HasOne("Site.Data.Websites", "Website")
                        .WithMany("ReviewTemplates")
                        .HasForeignKey("WebsiteId")
                        .HasConstraintName("FK_ReviewTemplates_Websites");
                });

            modelBuilder.Entity("Site.Data.ShippingClasses", b =>
                {
                    b.HasOne("Site.Data.Websites", "Website")
                        .WithMany("ShippingClasses")
                        .HasForeignKey("WebsiteId")
                        .HasConstraintName("FK_ShippingClasses_Websites")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Site.Data.ShippingZoneLocations", b =>
                {
                    b.HasOne("Site.Data.ShippingZones", "ShippingZone")
                        .WithMany("ShippingZoneLocations")
                        .HasForeignKey("ShippingZoneId")
                        .HasConstraintName("FK_ShippingZoneLocations_ShippingZones")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Site.Data.ShippingZoneMethodClasses", b =>
                {
                    b.HasOne("Site.Data.ShippingZoneMethods", "ShippingZoneMethod")
                        .WithMany("ShippingZoneMethodClasses")
                        .HasForeignKey("ShippingZoneMethodId")
                        .HasConstraintName("FK_ShippingZoneMethodClasses_ShippingZoneMethods")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Site.Data.ShippingZoneMethods", b =>
                {
                    b.HasOne("Site.Data.ShippingZones", "ShippingZone")
                        .WithMany("ShippingZoneMethods")
                        .HasForeignKey("ShippingZoneId")
                        .HasConstraintName("FK_ShippingZoneMethods_ShippingZones")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Site.Data.ShippingZones", b =>
                {
                    b.HasOne("Site.Data.Websites", "Website")
                        .WithMany("ShippingZones")
                        .HasForeignKey("WebsiteId")
                        .HasConstraintName("FK_ShippingZones_Websites")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Site.Data.TaxClasses", b =>
                {
                    b.HasOne("Site.Data.Websites", "Website")
                        .WithMany("TaxClasses")
                        .HasForeignKey("WebsiteId")
                        .HasConstraintName("FK_TaxClasses_Websites")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Site.Data.TaxRateLocations", b =>
                {
                    b.HasOne("Site.Data.TaxRates", "TaxRate")
                        .WithMany("TaxRateLocations")
                        .HasForeignKey("TaxRateId")
                        .HasConstraintName("FK_TaxRateLocations_TaxRates")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Site.Data.TaxRates", b =>
                {
                    b.HasOne("Site.Data.TaxClasses", "TaxClass")
                        .WithMany("TaxRates")
                        .HasForeignKey("TaxClassId")
                        .HasConstraintName("FK_TaxRates_TaxClasses")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Site.Data.WebsiteFields", b =>
                {
                    b.HasOne("Site.Data.Websites", "Website")
                        .WithMany("WebsiteFields")
                        .HasForeignKey("WebsiteId")
                        .HasConstraintName("FK_WebsiteFields_Websites")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Site.Data.WebsiteFiles", b =>
                {
                    b.HasOne("Site.Data.WebsiteLanguages", "WebsiteLanguage")
                        .WithMany("WebsiteFiles")
                        .HasForeignKey("WebsiteLanguageId")
                        .HasConstraintName("FK_WebsiteFiles_WebsiteLanguages")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Site.Data.WebsiteLanguages", b =>
                {
                    b.HasOne("Site.Data.Languages", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Site.Data.Websites", "Website")
                        .WithMany("WebsiteLanguages")
                        .HasForeignKey("WebsiteId")
                        .HasConstraintName("FK_WebsiteLanguages_Websites")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Site.Data.WebsiteResources", b =>
                {
                    b.HasOne("Site.Data.WebsiteLanguages", "WebsiteLanguage")
                        .WithMany("WebsiteResources")
                        .HasForeignKey("WebsiteLanguageId")
                        .HasConstraintName("FK_WebsiteResources_WebsiteLanguages")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Site.Data.Websites", b =>
                {
                    b.HasOne("Site.Data.Companies", "Company")
                        .WithMany("Websites")
                        .HasForeignKey("CompanyId")
                        .HasConstraintName("FK_Websites_Companies")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Site.Data.WebsiteLanguages")
                        .WithMany("Websites")
                        .HasForeignKey("WebsiteLanguagesId");
                });

            modelBuilder.Entity("Site.Data.WebsiteUploads", b =>
                {
                    b.HasOne("Site.Data.Websites", "Website")
                        .WithMany("WebsiteUploads")
                        .HasForeignKey("WebsiteId")
                        .HasConstraintName("FK_WebsiteUploads_Websites")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
